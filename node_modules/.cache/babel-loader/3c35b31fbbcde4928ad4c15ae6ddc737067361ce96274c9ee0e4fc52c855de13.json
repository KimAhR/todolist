{"ast":null,"code":"import _slicedToArray from\"C:/Users/Neppplus/Desktop/\\uD3EC\\uD3F4/todolist/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"C:/Users/Neppplus/Desktop/\\uD3EC\\uD3F4/todolist/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/context/todos.js\nimport{createContext,useContext,useReducer,useState}from\"react\";// createContext(기본값) : 컨텍스트를 만든다.\n//      => Provider 밖에서 useContext를 사용하면 반환되는 값.\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var NumContext=/*#__PURE__*/createContext(0);export var StrContext=/*#__PURE__*/createContext(\"기본값\");export var TodoStateContext=/*#__PURE__*/createContext(null);export var TodoDispatchContext=/*#__PURE__*/createContext(null);var initialState=[{id:1,text:\"투두리스트 스타일링\",done:true},{id:2,text:\"투두리스트 기능 구현하기\",done:false},{id:3,text:\"리팩토링 하기\",done:false}];// 배열 업데이트하는 리듀서 함수 만들기\nfunction reducer(state,action){switch(action.type){case\"CREATE_TODO\":return state.concat({id:action.id,text:action.text,done:false});case\"REMOVE_TODO\":return state.filter(function(todo){return todo.id!==action.id;});case\"TOGGLE_TODO\":return state.map(function(todo){return todo.id===action.id?_objectSpread(_objectSpread({},todo),{},{done:!todo.done}):todo;});default:return state;}}export function TodoProvider(_ref){var children=_ref.children;var _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(TodoStateContext.Provider,{value:state,children:/*#__PURE__*/_jsx(TodoDispatchContext.Provider,{value:dispatch,children:children})});}// 커스텀 훅 : React 훅들을 조합해서 커스텀으로 훅을 만든다. use로 시작한다.\nexport function useTodoState(){var context=useContext(TodoStateContext);// context가 null일 경우 : Provider 밖이다.\nif(!context)throw Error(\"Provider 없음\");return context;}export function useTodoDispatch(){var context=useContext(TodoDispatchContext);if(!context)throw Error(\"Provider 없음\");return context;}","map":{"version":3,"names":["createContext","useContext","useReducer","useState","NumContext","StrContext","TodoStateContext","TodoDispatchContext","initialState","id","text","done","reducer","state","action","type","concat","filter","todo","map","TodoProvider","children","dispatch","useTodoState","context","Error","useTodoDispatch"],"sources":["C:/Users/Neppplus/Desktop/포폴/todolist/src/context/todos.js"],"sourcesContent":["// src/context/todos.js\r\nimport { createContext, useContext, useReducer, useState } from \"react\";\r\n\r\n// createContext(기본값) : 컨텍스트를 만든다.\r\n//      => Provider 밖에서 useContext를 사용하면 반환되는 값.\r\nexport const NumContext = createContext(0);\r\nexport const StrContext = createContext(\"기본값\");\r\nexport const TodoStateContext = createContext(null);\r\nexport const TodoDispatchContext = createContext(null);\r\n\r\nconst initialState = [\r\n  { id: 1, text: \"투두리스트 스타일링\", done: true },\r\n  { id: 2, text: \"투두리스트 기능 구현하기\", done: false },\r\n  { id: 3, text: \"리팩토링 하기\", done: false },\r\n];\r\n\r\n// 배열 업데이트하는 리듀서 함수 만들기\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CREATE_TODO\":\r\n      return state.concat({ id: action.id, text: action.text, done: false });\r\n    case \"REMOVE_TODO\":\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    case \"TOGGLE_TODO\":\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\n// 커스텀 훅 : React 훅들을 조합해서 커스텀으로 훅을 만든다. use로 시작한다.\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n\r\n  // context가 null일 경우 : Provider 밖이다.\r\n  if (!context) throw Error(\"Provider 없음\");\r\n\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n\r\n  if (!context) throw Error(\"Provider 없음\");\r\n\r\n  return context;\r\n}\r\n"],"mappings":"yQAAA;AACA,OAASA,aAAa,CAAEC,UAAU,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAEvE;AACA;AAAA,2CACA,MAAO,IAAMC,WAAU,cAAGJ,aAAa,CAAC,CAAC,CAAC,CAC1C,MAAO,IAAMK,WAAU,cAAGL,aAAa,CAAC,KAAK,CAAC,CAC9C,MAAO,IAAMM,iBAAgB,cAAGN,aAAa,CAAC,IAAI,CAAC,CACnD,MAAO,IAAMO,oBAAmB,cAAGP,aAAa,CAAC,IAAI,CAAC,CAEtD,GAAMQ,aAAY,CAAG,CACnB,CAAEC,EAAE,CAAE,CAAC,CAAEC,IAAI,CAAE,YAAY,CAAEC,IAAI,CAAE,IAAK,CAAC,CACzC,CAAEF,EAAE,CAAE,CAAC,CAAEC,IAAI,CAAE,eAAe,CAAEC,IAAI,CAAE,KAAM,CAAC,CAC7C,CAAEF,EAAE,CAAE,CAAC,CAAEC,IAAI,CAAE,SAAS,CAAEC,IAAI,CAAE,KAAM,CAAC,CACxC,CAED;AACA,QAASC,QAAO,CAACC,KAAK,CAAEC,MAAM,CAAE,CAC9B,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,aAAa,CAChB,MAAOF,MAAK,CAACG,MAAM,CAAC,CAAEP,EAAE,CAAEK,MAAM,CAACL,EAAE,CAAEC,IAAI,CAAEI,MAAM,CAACJ,IAAI,CAAEC,IAAI,CAAE,KAAM,CAAC,CAAC,CACxE,IAAK,aAAa,CAChB,MAAOE,MAAK,CAACI,MAAM,CAAC,SAACC,IAAI,QAAKA,KAAI,CAACT,EAAE,GAAKK,MAAM,CAACL,EAAE,GAAC,CACtD,IAAK,aAAa,CAChB,MAAOI,MAAK,CAACM,GAAG,CAAC,SAACD,IAAI,QACpBA,KAAI,CAACT,EAAE,GAAKK,MAAM,CAACL,EAAE,gCAAQS,IAAI,MAAEP,IAAI,CAAE,CAACO,IAAI,CAACP,IAAI,GAAKO,IAAI,GAC7D,CACH,QACE,MAAOL,MAAK,CAAC,CAEnB,CAEA,MAAO,SAASO,aAAY,MAAe,IAAZC,SAAQ,MAARA,QAAQ,CACrC,gBAA0BnB,UAAU,CAACU,OAAO,CAAEJ,YAAY,CAAC,4CAApDK,KAAK,iBAAES,QAAQ,iBACtB,mBACE,KAAC,gBAAgB,CAAC,QAAQ,EAAC,KAAK,CAAET,KAAM,uBACtC,KAAC,mBAAmB,CAAC,QAAQ,EAAC,KAAK,CAAES,QAAS,UAC3CD,QAAQ,EACoB,EACL,CAEhC,CAEA;AACA,MAAO,SAASE,aAAY,EAAG,CAC7B,GAAMC,QAAO,CAAGvB,UAAU,CAACK,gBAAgB,CAAC,CAE5C;AACA,GAAI,CAACkB,OAAO,CAAE,KAAMC,MAAK,CAAC,aAAa,CAAC,CAExC,MAAOD,QAAO,CAChB,CAEA,MAAO,SAASE,gBAAe,EAAG,CAChC,GAAMF,QAAO,CAAGvB,UAAU,CAACM,mBAAmB,CAAC,CAE/C,GAAI,CAACiB,OAAO,CAAE,KAAMC,MAAK,CAAC,aAAa,CAAC,CAExC,MAAOD,QAAO,CAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}