{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neppplus\\\\Desktop\\\\kimahreum\\\\todos\\\\src\\\\component\\\\Container.jsx\";\nimport styled, { keyframes } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Container(_ref) {\n  let {\n    bgColor\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BigBox, {\n      bgColor: bgColor,\n      children: \"Box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n// 애니메이션 정의\n_c = Container;\nconst fadeIn = keyframes`\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n`;\n\n// styled.태그명`` : `` scss 문법대로 작성\n//      => 컴포넌트에 스타일도 함께 작성 가능해서 하나의 파일로 관리할 수 있다.\n//      => 클래스 중복 신경쓰지 않아도 된다.\n//      => 동적으로 값 바꾸기가 용이하다.\n//      => 태그명을 통해서 직관적으로 알기 쉽다.\n\nconst Box = styled.div`\n  width: 100px;\n  height: 100px;\n  background-color: ${_ref2 => {\n  let {\n    bgColor\n  } = _ref2;\n  return bgColor;\n}};\n  color: ${_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.colors.main_color;\n}};\n  animation: ${fadeIn} 1s 2;\n\n  &:active {\n    color: ${_ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.colors.active_color;\n}};\n  }\n\n  @media (max-width: 500px) {\n    width: 200px;\n  }\n`;\n\n// 기존 컴포넌트의 특정 값 덮어 씌우기\nconst BigBox = styled(Box)`\n  width: 300px;\n  height: 300px;\n`;\n_c2 = BigBox;\nexport default Container;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"BigBox\");","map":{"version":3,"names":["styled","keyframes","Container","bgColor","fadeIn","Box","div","theme","colors","main_color","active_color","BigBox"],"sources":["C:/Users/Neppplus/Desktop/kimahreum/todos/src/component/Container.jsx"],"sourcesContent":["import styled, { keyframes } from \"styled-components\";\r\n\r\nfunction Container({ bgColor }) {\r\n  return (\r\n    <>\r\n      <BigBox bgColor={bgColor}>Box</BigBox>\r\n    </>\r\n  );\r\n}\r\n\r\n// 애니메이션 정의\r\nconst fadeIn = keyframes`\r\n    from {\r\n        opacity: 0;\r\n    }\r\n    to {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\n// styled.태그명`` : `` scss 문법대로 작성\r\n//      => 컴포넌트에 스타일도 함께 작성 가능해서 하나의 파일로 관리할 수 있다.\r\n//      => 클래스 중복 신경쓰지 않아도 된다.\r\n//      => 동적으로 값 바꾸기가 용이하다.\r\n//      => 태그명을 통해서 직관적으로 알기 쉽다.\r\n\r\nconst Box = styled.div`\r\n  width: 100px;\r\n  height: 100px;\r\n  background-color: ${({ bgColor }) => bgColor};\r\n  color: ${({ theme }) => theme.colors.main_color};\r\n  animation: ${fadeIn} 1s 2;\r\n\r\n  &:active {\r\n    color: ${({ theme }) => theme.colors.active_color};\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    width: 200px;\r\n  }\r\n`;\r\n\r\n// 기존 컴포넌트의 특정 값 덮어 씌우기\r\nconst BigBox = styled(Box)`\r\n  width: 300px;\r\n  height: 300px;\r\n`;\r\n\r\nexport default Container;\r\n"],"mappings":";AAAA,OAAOA,MAAM,IAAIC,SAAS,QAAQ,mBAAmB;AAAC;AAAA;AAEtD,SAASC,SAAS,OAAc;EAAA,IAAb;IAAEC;EAAQ,CAAC;EAC5B,oBACE;IAAA,uBACE,QAAC,MAAM;MAAC,OAAO,EAAEA,OAAQ;MAAA,UAAC;IAAG;MAAA;MAAA;MAAA;IAAA;EAAS,iBACrC;AAEP;;AAEA;AAAA,KARSD,SAAS;AASlB,MAAME,MAAM,GAAGH,SAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,MAAMI,GAAG,GAAGL,MAAM,CAACM,GAAI;AACvB;AACA;AACA,sBAAsB;EAAA,IAAC;IAAEH;EAAQ,CAAC;EAAA,OAAKA,OAAO;AAAA,CAAC;AAC/C,WAAW;EAAA,IAAC;IAAEI;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACC,MAAM,CAACC,UAAU;AAAA,CAAC;AAClD,eAAeL,MAAO;AACtB;AACA;AACA,aAAa;EAAA,IAAC;IAAEG;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACC,MAAM,CAACE,YAAY;AAAA,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMC,MAAM,GAAGX,MAAM,CAACK,GAAG,CAAE;AAC3B;AACA;AACA,CAAC;AAAC,MAHIM,MAAM;AAKZ,eAAeT,SAAS;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}