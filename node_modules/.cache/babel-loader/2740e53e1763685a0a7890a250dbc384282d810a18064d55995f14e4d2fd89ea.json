{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Neppplus\\\\Desktop\\\\kimahreum\\\\todos\\\\src\\\\context\\\\todos.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/todos.js\nimport { createContext, useContext, useReducer, useState } from \"react\";\n\n// createContext(기본값) : 컨텍스트를 만든다.\n//      => Provider 밖에서 useContext를 사용하면 반환되는 값.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NumContext = /*#__PURE__*/createContext(0);\nexport const StrContext = /*#__PURE__*/createContext(\"기본값\");\nexport const TodoStateContext = /*#__PURE__*/createContext(null);\nexport const TodoDispatchContext = /*#__PURE__*/createContext(null);\nconst initialState = [{\n  id: 1,\n  text: \"투두리스트 스타일링\",\n  done: true\n}, {\n  id: 2,\n  text: \"투두리스트 기능 구현하기\",\n  done: false\n}, {\n  id: 3,\n  text: \"리팩토링 하기\",\n  done: false\n}];\n\n// 배열 업데이트하는 리듀서 함수 만들기\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"CREATE_TODO\":\n      return state.concat({\n        id: action.id,\n        text: action.text,\n        done: false\n      });\n    case \"REMOVE_TODO\":\n      return state.filter(todo => todo.id !== action.id);\n    case \"TOGGLE_TODO\":\n      return state.map(todo => todo.id === action.id ? {\n        ...todo,\n        done: !todo.done\n      } : todo);\n    default:\n      return state;\n  }\n}\nexport function TodoProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n//커스텀 훅 -> use로 시작\n_s(TodoProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = TodoProvider;\nexport function useTodoState() {\n  _s2();\n  const context = useContext(TodoStateContext);\n  return context;\n}\n_s2(useTodoState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","useState","NumContext","StrContext","TodoStateContext","TodoDispatchContext","initialState","id","text","done","reducer","state","action","type","concat","filter","todo","map","TodoProvider","children","dispatch","useTodoState","context"],"sources":["C:/Users/Neppplus/Desktop/kimahreum/todos/src/context/todos.js"],"sourcesContent":["// src/context/todos.js\r\nimport { createContext, useContext, useReducer, useState } from \"react\";\r\n\r\n// createContext(기본값) : 컨텍스트를 만든다.\r\n//      => Provider 밖에서 useContext를 사용하면 반환되는 값.\r\nexport const NumContext = createContext(0);\r\nexport const StrContext = createContext(\"기본값\");\r\nexport const TodoStateContext = createContext(null);\r\nexport const TodoDispatchContext = createContext(null);\r\n\r\nconst initialState = [\r\n  { id: 1, text: \"투두리스트 스타일링\", done: true },\r\n  { id: 2, text: \"투두리스트 기능 구현하기\", done: false },\r\n  { id: 3, text: \"리팩토링 하기\", done: false },\r\n];\r\n\r\n// 배열 업데이트하는 리듀서 함수 만들기\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CREATE_TODO\":\r\n      return state.concat({ id: action.id, text: action.text, done: false });\r\n    case \"REMOVE_TODO\":\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    case \"TOGGLE_TODO\":\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\n//커스텀 훅 -> use로 시작\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n\r\n  return context;\r\n}\r\n"],"mappings":";;;AAAA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAEvE;AACA;AAAA;AACA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,CAAC,CAAC,CAAC;AAC1C,OAAO,MAAMK,UAAU,gBAAGL,aAAa,CAAC,KAAK,CAAC;AAC9C,OAAO,MAAMM,gBAAgB,gBAAGN,aAAa,CAAC,IAAI,CAAC;AACnD,OAAO,MAAMO,mBAAmB,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEtD,MAAMQ,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAK,CAAC,EACzC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAM,CAAC,EAC7C;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAM,CAAC,CACxC;;AAED;AACA,SAASC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAOF,KAAK,CAACG,MAAM,CAAC;QAAEP,EAAE,EAAEK,MAAM,CAACL,EAAE;QAAEC,IAAI,EAAEI,MAAM,CAACJ,IAAI;QAAEC,IAAI,EAAE;MAAM,CAAC,CAAC;IACxE,KAAK,aAAa;MAChB,OAAOE,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACT,EAAE,KAAKK,MAAM,CAACL,EAAE,CAAC;IACtD,KAAK,aAAa;MAChB,OAAOI,KAAK,CAACM,GAAG,CAAED,IAAI,IACpBA,IAAI,CAACT,EAAE,KAAKK,MAAM,CAACL,EAAE,GAAG;QAAE,GAAGS,IAAI;QAAEP,IAAI,EAAE,CAACO,IAAI,CAACP;MAAK,CAAC,GAAGO,IAAI,CAC7D;IACH;MACE,OAAOL,KAAK;EAAC;AAEnB;AAEA,OAAO,SAASO,YAAY,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EACvC,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGpB,UAAU,CAACU,OAAO,EAAEJ,YAAY,CAAC;EAC3D,oBACE,QAAC,gBAAgB,CAAC,QAAQ;IAAC,KAAK,EAAEK,KAAM;IAAA,uBACtC,QAAC,mBAAmB,CAAC,QAAQ;MAAC,KAAK,EAAES,QAAS;MAAA,UAC3CD;IAAQ;MAAA;MAAA;MAAA;IAAA;EACoB;IAAA;IAAA;IAAA;EAAA,QACL;AAEhC;;AAEA;AAAA,GAXgBD,YAAY;AAAA,KAAZA,YAAY;AAY5B,OAAO,SAASG,YAAY,GAAG;EAAA;EAC7B,MAAMC,OAAO,GAAGvB,UAAU,CAACK,gBAAgB,CAAC;EAE5C,OAAOkB,OAAO;AAChB;AAAC,IAJeD,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}